Classic Redux:
///
useSelector: to get something from a redux-store.
useDispatch: to useDispatch something / send information.

slice up scripts so they only are dependent on what you going to use it for. 
(decouple)

use a main store.js to combine them into a store where we can 'dispatch' and 'select' when needed.
 
combine the slices/reducers and give them a key.
///
const rootReducer = combineReducers({
    account: accountReducer,
    customer: customerReducer
})
const store = createStore(rootReducer);

export default store;
///

useSelector (get information)
///
  const customer = useSelector(store => store.customer.fullName) //get fullName
    const {loan: currentLoan, loanPurpose: currentLoanPurpose, balance} = useSelector(store => store.account);
    //deconstruct the account reducer's values.
///

useDispatch (send information)
///
  const dispatch = useDispatch(); //init
    dispatch(deposit(depositAmount)); //use

   export const deposit = (amount) => {
    return { type: 'account/deposit', payload: amount } //action
}
///

MIDDLEWARE:
Perfect for async code,
API Calls, timers, logging etc..
The place for side effects.

Reason: reducers needs to be pure functions, no async operations.

Road: Component > dispatch > MIDDLEWARE > store


///
INSTALL REDUX DEVTOOLS:

1.Chrome plugin
2.npm package: npm i redux-devtools-extension (--force if needed)
3.usage: composeWithDevTools()

///
Redux-Toolkit: 
modern and preferred way to write redux code.
Redux best practices
can use classic/old redux code with Toolkit.
less code to achieve same result.
action creators are auto created.
sets up thunk-middleware automatic and devtools.

// configureStore();
less code needed, adds thunk/middleware auto

//actions can only take 1 parameter.
solution is by using a prepare method such as: 
          prepare(amount, purpose) {
                return {
                    payload: {
                        amount,
                        purpose
                    }
                };
            },

before your reducer. OR you could put in a { object } in the paramter when calling
your action.


REDUX VS CONTEXTAPI

ContextAPI:
PRO// 
ContextAPI+useReducers: already built into app
Easy to set up a single context;

CON//
additional context needs a new setup (provider hell)
no async operations
performance optimization is a pain
only react-devtools.

Redux: 
PRO//
Once set up, easy to create additional slices.
One provider
supports middleware for async operations.
out of box performance optimizations.
very good devtools

CON//
Needs NPM package.
Some work to set up.

WHEN TO USE:
ContextAPI: global state for small apps
Redux: use in large apps